# -*- coding: utf-8 -*-
"""ncaa_monte_carlo_substitution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FkHRoYqIYEeqphNsRZ4XRRrS_rb_NZVp
"""

from pyrosetta.rosetta.core.pack.palette import CustomBaseTypePackerPalette
from pyrosetta import *
from rosetta import *
from rosetta.core.scoring import *
from pyrosetta.toolbox import *
import rosetta.basic.options
import numpy as np
import argparse
import os

init(extra_options='-in:file:override_rot_lib_path ncaa_rotamer_libraries -in:ignore_unrecognized_res True')

# Reading in files
ncaa_files = ['0TD', 'B36', 'C42', '4J5', 'B38', 'C53', 'A04', 'B40', 'C54', 'A06', 'B44', 'C55', 'A07', 'B49', 'C60', 'A12', 'B50', 'C61', 'A20', 'B54', 'C80', 'A24', 'B56', 'C81', 'A30', 'B57', 'C83', 'A31', 'B58', 'C84', 'A32', 'B59', 'C85', 'A33', 'B60', 'C86', 'A34', 'B61', 'C87', 'A43', 'B62', 'C88', 'A45', 'B63', 'C89', 'A48', 'B67', 'A68', 'B74', 'C91', 'A69', 'B95', 'C92', 'A78', 'B96', 'C93', 'A80', 'B97', 'C94', 'A82', 'BB8', 'C95', 'A83', 'BCS', 'DAB', 'A84', 'BMAA', 'DPP', 'A91', 'BZP', 'HLU', 'A92', 'BiphenylAlanine', 'HPR', 'A94', 'C00', 'HTY', 'A98', 'C01', 'IGL', 'ABA', 'C03', 'MPA', 'APA', 'C04', 'MTP', 'B02', 'C05', 'NLU', 'B06', 'C12', 'NVL', 'B12', 'C15', 'ORN', 'B19', 'C16', 'S56', 'B21', 'C20', 'TES', 'B27', 'C26', 'V01', 'B28', 'C27', 'V02', 'B30', 'V03', 'B31', 'C36', 'V04', 'B35', 'C41', 'dhI']
residues = np.arange(24)+1
aa_files = ['A06', 'B48', 'C41', 'D80', 'E35', 'F20', 'A07', 'B49', 'C42', 'D82', 'E36', 'F26', 'A12', 'B51', 'C43', 'D83', 'E38', 'F27', 'A20', 'B53', 'C53', 'D84', 'E40', 'F30', 'A24', 'B54', 'C54', 'D91', 'E44', 'F36', 'A30', 'B56', 'C55', 'D92', 'E47', 'F40', 'A31', 'B57', 'C60', 'D94', 'E48', 'F41', 'A33', 'B58', 'C61', 'daba', 'E49', 'F42', 'A34', 'B60', 'C80', 'dapa', 'E51', 'F43', 'A43', 'B61', 'C81', 'darg', 'E53', 'F53', 'A44', 'B62', 'C83', 'dasn', 'E54', 'F54', 'A45', 'B63', 'C84', 'dasp', 'E56', 'F55', 'A48', 'B67', 'C85', 'dcys', 'E57', 'F60', 'A68', 'B74', 'C86', 'dgln', 'E58', 'F61', 'A69', 'B92', 'C87', 'dglu', 'E60', 'F80', 'A78', 'B93', 'C88', 'dhis', 'E61', 'F81', 'A80', 'B94', 'C90', 'dhlu', 'E62', 'F83', 'A82', 'B95', 'C91', 'dile', 'E63', 'F84', 'A83', 'B96', 'C92', 'dleu', 'E67', 'F85', 'A84', 'B97', 'C93', 'dlys', 'E74', 'F86', 'A91', 'B99', 'C94', 'dmet', 'E92', 'F87', 'A92', 'C00', 'D06', 'dmpa', 'E93', 'F88', 'A94', 'C01', 'D07', 'dnlu', 'E94', 'F90', 'aba', 'C02', 'D12', 'dnvl', 'E95', 'F91', 'apa', 'C03', 'D20', 'dphe', 'E96', 'F92', 'B12', 'C04', 'D24', 'dpro', 'E97', 'F93', 'B21', 'C05', 'D30', 'dser', 'E99', 'F94', 'B27', 'C11', 'D31', 'dthr', 'F00', 'hlu', 'B28', 'C12', 'D33', 'dtrp', 'F01', 'mpa', 'B30', 'C15', 'D34', 'dtyr', 'F02', 'mtp', 'B31', 'C16', 'D43', 'dval', 'F03', 'nlu', 'B35', 'C20', 'D44', 'E12', 'F04', 'nvl', 'B36', 'C26', 'D45', 'E21', 'F05', 'pro_unk', 'B38', 'C27', 'D48', 'E27', 'F11', 'B40', 'C30', 'D68', 'E28', 'F12', 'B44', 'C36', 'D69', 'E30', 'F15', 'B47', 'C40', 'D78', 'E31', 'F16']
ncaas = np.where(np.isin(ncaa_files, aa_files).astype(int) == 1)[0].astype(int)
ncaas = [ncaa_files[ncaa] for ncaa in ncaas]

input_file = "remodel_16_5_decoy_10_10.pdb"
pose = pose_from_pdb(input_file)
new_pose = pose.clone()

scorefxn = get_fa_scorefxn()

fastrelax = rosetta.protocols.relax.FastRelax(scorefxn, 1)

# MonteCarlo object for finding lowest-energy configuration
mc = MonteCarlo(pose, scorefxn, 1.0)

# MutateResidue object
MutateResidue = pyrosetta.rosetta.protocols.simple_moves.MutateResidue

#set up mutations
def mutate_res_to_ncaa(i, pose):
  resnum = np.random.choice(residues)
  ran_aa = ncaas[np.random.randint(0, len(ncaas))]
  print(i, resnum, ran_aa)
  MutateResidue(target=resnum, new_res=ran_aa).apply(pose)
  return pose

# Method to find best sequence randomly mutating
def find_best(pose):
  
  mc.reset(pose)
  for i in range(1, 10000):
    mutate_res_to_ncaa(i, pose)
    mc.boltzmann(pose)
    if i % 500 == 0:
      mc.recover_low(pose)

  #output lowest-energy structure
  mc.recover_low(pose)
  fastrelax.apply(pose)
  return pose

pose = find_best(pose)
fastrelax.apply(pose)

iteration = 1
print('Iteration', iteration)
pdb_file_name = 'mutant_complexes/mutated_helix_rbd_complex_' + str(iteration) + '.pdb'
dump_pdb(pose, pdb_file_name)